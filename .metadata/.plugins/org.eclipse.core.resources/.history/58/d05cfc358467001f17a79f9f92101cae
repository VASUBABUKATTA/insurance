package com.insurance.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.insurance.Exception.ResourceNotFoundException;
import com.insurance.model.StructureAndDetails;
import com.insurance.repository.StructureDetailsRepository;

@Service
public class StructureAndDetailsService {

    @Autowired
    StructureDetailsRepository propertyInsuranceRepository;

    public ResponseEntity<List<StructureAndDetails>> getAllDetails() {
        List<StructureAndDetails> details = propertyInsuranceRepository.findAll();
        return new ResponseEntity<>(details, HttpStatus.OK);
    }

    public ResponseEntity<Optional<List<StructureAndDetails>>> getStructureDetailsByCustomerId(String customerId) {
        Optional<List<StructureAndDetails>> structuresOptional = propertyInsuranceRepository.findByCustomerId(customerId);

        if (structuresOptional.isPresent() && structuresOptional.get().isEmpty()) {
            throw new ResourceNotFoundException("Customer Id Not Found");
        }

        return new ResponseEntity<>(structuresOptional, HttpStatus.OK);
    }

    public ResponseEntity<StructureAndDetails> createDetails(StructureAndDetails details) {
        StructureAndDetails savedDetails = propertyInsuranceRepository.save(details);
        return new ResponseEntity<>(savedDetails, HttpStatus.CREATED);
    }

    public ResponseEntity<Optional<StructureAndDetails>> getStructureDetailsById(long id) {
        Optional<StructureAndDetails> structureDetails = propertyInsuranceRepository.findById(id);
        if (structureDetails.isEmpty()) {
            throw new ResourceNotFoundException("Id Was Not Found");
        }
        return new ResponseEntity<>(structureDetails, HttpStatus.OK);
    }

    public ResponseEntity<String> deleteStructureDetailsById(long id) {
        Optional<StructureAndDetails> existingDetailsOptional = propertyInsuranceRepository.findById(id);
        if (existingDetailsOptional.isPresent()) {
            propertyInsuranceRepository.deleteById(id);
            return new ResponseEntity<>("Structure details deleted successfully", HttpStatus.OK);
        } else {
            throw new ResourceNotFoundException("Id Was Not Found");
        }
    }

    public ResponseEntity<String> updateStructureDetailsById(long id, StructureAndDetails details) {
        Optional<StructureAndDetails> existingDetailsOptional = propertyInsuranceRepository.findById(id);
        if (existingDetailsOptional.isPresent()) {
            StructureAndDetails existingDetails = existingDetailsOptional.get();

            existingDetails.setMarketValue(details.getMarketValue());
            existingDetails.setSquareFeet(details.getSquareFeet());
            existingDetails.setPincode(details.getPincode());
            existingDetails.setBuildingAge(details.getBuildingAge());
            existingDetails.setSecurity(details.getSecurity());
            existingDetails.setEffected(details.getEffected());
            existingDetails.setPerson(details.getPerson());

            propertyInsuranceRepository.save(existingDetails);
            return new ResponseEntity<>("Updated Successfully", HttpStatus.OK);
        } else {
            throw new ResourceNotFoundException("Id Was Not Found");
        }
    }
}
