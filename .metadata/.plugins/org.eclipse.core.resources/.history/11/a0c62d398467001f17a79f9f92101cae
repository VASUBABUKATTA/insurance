package com.insurance.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.insurance.model.StructureAndDetails;
import com.insurance.service.StructureAndDetailsService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin("*")
@Tag(
    name = "CRUD REST APIs for StructureAndDetails",
    description = "CRUD REST API in property insurance to CREATE, UPDATE, FETCH, AND DELETE insurance details"
)
public class StructureAndDetailsController {

    @Autowired
    StructureAndDetailsService propertyInsuranceService;

    @Operation(
        summary = "Getting All structure details",
        description = "GET API to fetch all the insurances that sold"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "HTTP status OK"
        )
    })
    @GetMapping("/getStructure")
    public ResponseEntity<List<StructureAndDetails>> getAllDetails() {
        List<StructureAndDetails> details = propertyInsuranceService.getAllDetails();
        return new ResponseEntity<>(details, HttpStatus.OK);
    }

    @Operation(
        summary = "Getting a single Customer All structure details based on customerId",
        description = "GET API to fetch all the insurances that sold to a customer"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "HTTP status OK"
        )
    })
    @GetMapping("/getStructureByCustomerId/{customerId}")
    public ResponseEntity<Optional<List<StructureAndDetails>>> getStructureDetailsByCustomerId(@PathVariable String customerId) {
        Optional<List<StructureAndDetails>> details = propertyInsuranceService.getStructureDetailsByCustomerId(customerId);
        return new ResponseEntity<>(details, HttpStatus.OK);
    }

    @Operation(
        summary = "Getting a single structure details based on Id",
        description = "GET API to fetch a single insurance detail that was sold"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "HTTP status OK"
        )
    })
    @GetMapping("/getStructureDetailsById/{id}")
    public ResponseEntity<Optional<StructureAndDetails>> getStructureDetailsById(@PathVariable long id) {
        Optional<StructureAndDetails> detail = propertyInsuranceService.getStructureDetailsById(id);
        return new ResponseEntity<>(detail, HttpStatus.OK);
    }

    @Operation(
        summary = "Creating a single structure details",
        description = "POST API to create a single insurance detail that was sold"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "201",
            description = "HTTP status Created"
        )
    })
    @PostMapping("/putStructure")
    public ResponseEntity<StructureAndDetails> createDetails(@RequestBody StructureAndDetails details) {
        StructureAndDetails createdDetail = propertyInsuranceService.createDetails(details);
        return new ResponseEntity<>(createdDetail, HttpStatus.CREATED);
    }

    @Operation(
        summary = "Deleting a single structure details based on Id",
        description = "DELETE API to delete a single insurance detail that was sold"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "HTTP status OK"
        )
    })
    @DeleteMapping("/deleteStructureDetails/{id}")
    public ResponseEntity<String> deleteStructureDetailsById(@PathVariable long id) {
        String message = propertyInsuranceService.deleteStructureDetailsById(id);
        return new ResponseEntity<>(message, HttpStatus.OK);
    }

    @Operation(
        summary = "Updating a structure details by Id",
        description = "PUT API to update a structure detail"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "HTTP status OK"
        )
    })
    @PutMapping("/updateStructureDetails/{id}")
    public ResponseEntity<String> updateStructureDetailsById(@PathVariable long id, @Valid @RequestBody StructureAndDetails details) {
        String message = propertyInsuranceService.updateStructureDetailsById(id, details);
        return new ResponseEntity<>(message, HttpStatus.OK);
    }
}
