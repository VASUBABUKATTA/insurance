package com.insurance.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.insurance.model.CustomerSignupDetails;
import com.insurance.service.CustomerSignupService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Pattern;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin("*")
//@Tag(
//		name="CRUD REST APIs for CustomerSignupDetails",
//		description = " CRUD rest api in CustomerSignupDetails to CREATE, UPDATE, FETCH AND DELETE insurance details"
//	)
public class CustomerSignupDetailsController 
{
	
	@Autowired
	private CustomerSignupService propertyInsuranceService;
	
	@Operation(
			summary = " Getting All customers ",
			description = " REST api to fetch all the customers that are signed up"
		)
		@ApiResponses({
			@ApiResponse(
				responseCode = "200",
				description = " Http status ok"
			)
		})
	
	@GetMapping("/getCustomer")
	public List<CustomerSignupDetails> getAllCustomers()
	{
		return propertyInsuranceService.getAllCustomers();
	}
	@Operation(
			summary = " Getting a customers based on customerId ",
			description = " REST api to fetch a customers"
		)
		@ApiResponses({
			@ApiResponse(
				responseCode = "200",
				description = " Http status ok"
			)
		})
	 @GetMapping("/getCustomerById/{customerId}")
	  public List<CustomerSignupDetails> getCustomerById(@PathVariable String customerId)
	 {
	        return propertyInsuranceService.getCustomerById(customerId);
	 }
	 @Operation(
			summary = " Getting A customer based on mobileNumber ",
			description = " REST api to fetch a customer"
		)
		@ApiResponses({
			@ApiResponse(
				responseCode = "200",
				description = " Http status ok"
			)
		})
		// List<CustomerSignup> 
	 @GetMapping("/getCustomerByMobileNumber/{mobileno}")
	  public List<CustomerSignupDetails> getCustomerIdByMobileNo( @Pattern(regexp = "(^[6-9][0-9]{9}$)", message = "mobileNumber must be start with 6 to 9 and have 10 digits")@PathVariable String mobileno) 
	 {
	    
			return propertyInsuranceService.getCustomerIdByMobileNo(mobileno);
	  }
	  @Operation(
		summary = " Creating  A customer ",
		description = " REST api to Create a customer"
	)
	@ApiResponses({
		@ApiResponse(
			responseCode = "201",
			description = " Http status Created"
		)
	})  
	@PostMapping("/putCustomer")
	public CustomerSignupDetails createCustomer(@Valid @RequestBody CustomerSignupDetails customer)
	{
		return propertyInsuranceService.createCustomer(customer);
	}

}
