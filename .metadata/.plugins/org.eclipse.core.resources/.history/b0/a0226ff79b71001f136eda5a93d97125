package com.ramanasoft.www.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ramanasoft.www.mode.VClaims;
import com.ramanasoft.www.service.VClaimsService;

import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/claims")
@CrossOrigin("*")
@Tag(
		name = "CRUD REST API's for VClaims Controller",
		description = "CRUD rest api for VClaims to CREATE, UPDATE, FETCH and DELETE insurance details."
		)
public class VClaimsController 
{

	@Autowired
	VClaimsService vehicleClaimsService;
	
	@PostMapping(path = "/uploadinservice", consumes = { "multipart/form-data" })
    public VClaims createPropertyClaimEntityInService(@RequestPart("vclaims") String vehicleClaimsEntity,
                                 @RequestPart("files") List<MultipartFile> files) throws IOException {

        // Deserialize the propertyclaimentity JSON string into a PropertyClaimEntity object
        ObjectMapper objectMapper = new ObjectMapper();
        VClaims vehicleclaimentity = objectMapper.readValue( vehicleClaimsEntity, VClaims.class);
        return vehicleClaimsService.savePropertyClaimEntityInService(vehicleclaimentity, files);
    }
	
	
	@GetMapping("/get")
	public List<VClaims> getAllClaims()
	{
		return vehicleClaimsService.getAllClaims();
	}
	
    @GetMapping("/fetchPropertyClaimEntityWithValidImageUrls/{id}")
    public ResponseEntity<VClaims> getPropertyClaimEntityByIdWithImagesApprovedOrAppliedStatus(@PathVariable Long id) {
        return vehicleClaimsService.getPropertyClaimEntityByIdWithApprovedOrAppliedImages(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}
