package com.insurance.controller;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin("*")
@Tag(
		name="CRUD REST APIs for PropertyInsurance",
		description = " CRUD rest api in propertyinsurance to CREATE, UPDATE, FETCH AND DELETE insurance details"
	)
public class CustomerPaymentDetailsController 
{
	@Autowired
	PropertyInsuranceService propertyInsuranceService;
	@Operation(
		summary = " Getting All structure details",
		description = " get api to fetch all the insurances that sold"
	)
	@ApiResponses({
		@ApiResponse(
			responseCode = "200",
			description = " http status ok"
		)
	})
	@GetMapping("/getStructure")
	public List<StructureAndDetails> getAllDetails()
	{
		return propertyInsuranceService.getAllDetails();
	}

	@Operation(
		summary = " Getting a single Customer All structure details based on customerId ",
		description = " get api to fetch all the insurances that sold to a customer"
	)
	@ApiResponses({
		@ApiResponse(
			responseCode = "200",
			description = "http status ok"
		)
	})
	@GetMapping("/getStructureByCustomerId/{customerId}")
    public Optional<List<StructureAndDetails>> getStructureDetailsByCustomerId(@PathVariable String customerId) {
        return propertyInsuranceService.getStructureDetailsByCustomerId(customerId);
    }
	@Operation(
		summary = " Getting a single structure details based on Id",
		description = " get api to fetch a single insurances that sold"
	)
	@ApiResponses({
		@ApiResponse(
			responseCode = "200",
			description = " http status ok"
		)
	})
	@GetMapping("/getStructureDetailsById/{id}")
    public Optional<StructureAndDetails> getStructureDetailsById(@PathVariable long id) {
        return propertyInsuranceService.getStructureDetailsById(id);
    }
	@Operation(
		summary = " putting a single structure details",
		description = " REST api to CREATE a single insurances that sold"
	)
	@ApiResponses({
		@ApiResponse(
			responseCode = "201",
			description = " Http status Created"
		)
	})
	@PostMapping("/putStructure")
	public StructureAndDetails createDetails(@RequestBody StructureAndDetails details )
	{
		return propertyInsuranceService.createDetails(details);
	}
	
	
	@Operation(
		summary = " Deleting a single structure details based on Id",
		description = " REST api to delete a single insurances that sold"
	)
	@ApiResponses({
		@ApiResponse(
			responseCode = "201",
			description = " Http status Created"
		)
	})
	// delete the details of the structure details :
	 @DeleteMapping("/deleteStructureDetails/{id}")
	    public String deleteStructureDetailsById(@PathVariable long id) {
	        return propertyInsuranceService.deleteStructureDetailsById(id);
	        // if (result.equals("Deleted")) {
	        //     return ResponseEntity.ok().body("Structure details deleted successfully");
	        // } else {
	        //     return ResponseEntity.notFound().build();
	        // }
	    }
	
	

}
